1)Множество может быть полезно, когда необходимо хранить только уникальные данные
Отображение применяется в случаях, когда удобно использовать индексацию по сложному ключу, а не по индексам, как например в std::vector

2)Качественная хэш-функция должна обладать следующими свойствами: детерминированность (значение от одинаковых элементов равны), равномерность (отвечает за частоту коллизий)
и должна довольно быстро вычисляться

3)Размер хэш-таблицы напрямую зависит от модуля, который выбран программистом, то есть остаток от деления двух хэшей на модуль у разных значений иможет оказаться одинаковым
Есть два основных способа разрешения коллизий: метод цепочек (в каждой ячейке таблицы находиться контейнер, например std::list) и метод открытой адресации

4)Если при вставке коэффициент заполненности таблицы h/n превысил допустимое значение, произойдет рехэширование значений, что занимает O(n)
Кроме того из-за возникновения коллизий может понадобиться искать элемент в std::list, что также занимает O(n)

5)С помощью Boost.Multiindex можно обращаться с одним и тем же набором данных с помощью интерефейсов разных контерейнеров
Кроме того можно реализовать контейнер bimap, в котором есть доступ и по ключу, и по значению
